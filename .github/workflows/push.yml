name: Build and Deliver

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.22.0"
  NDK_VERSION: "r21e"
  GO_VERSION: "1.21.6"
  RUST_VERSION: "stable"
  GRADLE_VERSION: "8.0.2"

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [android, linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        if: matrix.platform == 'android'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      - name: Install Linux Dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build clang \
            libgtk-3-dev libglib2.0-dev libgirepository1.0-dev \
            liblzma-dev libsqlite3-dev libxi-dev libxtst-dev \
            xdg-utils pkg-config mesa-common-dev libdbus-1-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: aarch64-linux-android,x86_64-unknown-linux-gnu
          components: rustfmt, clippy

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Android NDK
        if: matrix.platform == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.NDK_VERSION }}
          link-to-sdk: true

      - name: Configure Android Gradle
        if: matrix.platform == 'android'
        run: |
          cd flutter_app/android
          ./gradlew wrapper --gradle-version=${{ env.GRADLE_VERSION }} --distribution-type=bin
          chmod +x gradlew

      - name: Configure Rust for Android
        if: matrix.platform == 'android'
        run: |
          mkdir -p binaries/rust/.cargo
          cat <<EOF > binaries/rust/.cargo/config
          [target.aarch64-linux-android]
          linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
          ar = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
          EOF

      - name: Build Binaries
        run: |
          echo "=== BUILDING ${{ matrix.platform }} BINARIES ==="
          cd binaries
          chmod +x build_${{ matrix.platform }}.sh
          ./build_${{ matrix.platform }}.sh
          tree -L 3

      - name: Prepare Assets
        run: |
          mkdir -p flutter_app/assets/${{ matrix.platform }}
          find binaries -name "hello-*" -exec install -Dm755 {} flutter_app/assets/${{ matrix.platform }} \;
          echo "Final assets:"
          ls -l flutter_app/assets/${{ matrix.platform }}/

      - name: Configure Linux Desktop
        if: matrix.platform == 'linux'
        run: |
          cd flutter_app
          flutter config --no-analytics --enable-linux-desktop
          flutter create --platforms=linux --org com.example --project-name hello_world .
          flutter pub get

      - name: Build Flutter App
        run: |
          cd flutter_app
          flutter clean
          flutter pub get --verbose
          
          if [ "${{ matrix.platform }}" = "android" ]; then
            flutter build apk --release --verbose \
              --target-platform android-arm64 \
              --dart-define=PLATFORM=android
          else
            flutter build linux --release --verbose \
              --target-platform linux-x64 \
              --dart-define=PLATFORM=linux
          fi

      - name: Validate Bundle
        run: |
          if [ "${{ matrix.platform }}" = "linux" ]; then
            echo "Linux binary dependencies:"
            ldd flutter_app/build/linux/x64/release/bundle/hello_world
          fi

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.platform }}" = "android" ]; then
            cp flutter_app/build/app/outputs/apk/release/app-release.apk artifacts/
          else
            cd flutter_app/build/linux/x64/release/bundle
            zip -r ../../../../../artifacts/hello_world_linux.zip .
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-binaries
          path: artifacts/*
